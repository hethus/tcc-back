// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "../entity_diagram.pdf"
}

model SubjectClass {
  id                  String                @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                String // nome da turma
  subjectName         String // nome da disciplina
  subjectId           Int
  semester            String
  teacher             User                  @relation(fields: [teacherId], references: [id])
  teacherId           String                @db.Uuid
  UsersSubjectClasses UsersSubjectClasses[]
  evaluations         Evaluation[]
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @default(now()) @updatedAt
}

model User {
  id           String                @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email        String                @unique
  name         String
  password     String
  token        String?
  tokenChange  String?
  registration String                @unique
  takenclasses UsersSubjectClasses[]
  forms        Form[]
  userType     String
  newUser      Boolean               @default(true)
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @default(now()) @updatedAt
  SubjectClass SubjectClass[]
  indicators   Indicator[]
  methodology  Methodology[]
  group        Group[]
  Response     Response[]
}

model UsersSubjectClasses {
  id             String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user           User         @relation(fields: [userId], references: [id])
  userId         String       @db.Uuid // relation scalar field (used in the `@relation` attribute above)
  subjectClass   SubjectClass @relation(fields: [subjectClassId], references: [id])
  subjectClassId String       @db.Uuid // relation scalar field (used in the `@relation` attribute above)
  assignedAt     DateTime     @default(now())
  assignedBy     String

  // @@id([userId, subjectClassId])
}

model Form {
  id          String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String
  description String
  random      Boolean
  questions   Question[]
  user        User        @relation(fields: [userId], references: [id])
  userId      String      @db.Uuid
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now()) @updatedAt
  evaluation  Evaluation?
  Indicator   Indicator?  @relation(fields: [indicatorId], references: [id])
  indicatorId String?     @db.Uuid
}

model Question {
  id           String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  singleAnswer Boolean
  title        String
  subtitle     String?
  style        Json?
  random       Boolean
  image        String?
  order        Float
  type         String
  mandatory    Boolean
  form         Form     @relation(fields: [formId], references: [id])
  formId       String   @db.Uuid
  options      Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
}

model Methodology {
  id         String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user       User        @relation(fields: [userId], references: [id])
  userId     String      @db.Uuid
  label      String      @unique
  indicators Indicator[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @default(now()) @updatedAt
}

model Group {
  id         String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user       User        @relation(fields: [userId], references: [id])
  userId     String      @db.Uuid
  label      String      @unique
  indicators Indicator[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @default(now()) @updatedAt
}

model Indicator {
  id            String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name          String
  description   String
  evaluations   Evaluation[]
  user          User         @relation(fields: [userId], references: [id])
  userId        String       @db.Uuid
  methodology   Methodology  @relation(fields: [methodologyId], references: [id])
  methodologyId String       @db.Uuid
  group         Group        @relation(fields: [groupId], references: [id])
  groupId       String       @db.Uuid
  forms         Form[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now()) @updatedAt
}

model Evaluation {
  id          String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  form        Form         @relation(fields: [formId], references: [id])
  formId      String       @unique @db.Uuid
  indicator   Indicator    @relation(fields: [indicatorId], references: [id]) //todo: lembrando que o form nao tera o idIndicator, quando for adicionado ao indicator, o form sera clonado e adicionado o idIndicator
  indicatorId String       @db.Uuid
  initialDate DateTime
  finalDate   DateTime
  class       SubjectClass @relation(fields: [classId], references: [id])
  classId     String       @db.Uuid
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
  Response    Response[]
}

model Response {
  id           String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  evaluation   Evaluation @relation(fields: [evaluationId], references: [id])
  evaluationId String     @db.Uuid
  user         User       @relation(fields: [userId], references: [id])
  userId       String     @db.Uuid
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) @updatedAt
}
