// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "../entity_diagram.pdf"
}

model SubjectClass {
  id          String                @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String
  subjectName String
  subjectId   Int
  semester    String
  students    UsersSubjectClasses[]
  teachers    UserGivenClasses[]
}

model User {
  id           String                @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email        String                @unique
  name         String
  password     String
  token        String?
  registration String                @unique
  takenclasses UsersSubjectClasses[]
  forms        Form[]
  givenClasses UserGivenClasses[]
  userType     String
  newUser      Boolean               @default(true)
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt @default(now())
}

model UserGivenClasses {
  user         User                  @relation(fields: [userId], references: [id])
  userId       String                @db.Uuid // relation scalar field (used in the `@relation` attribute above)
  givenClass   SubjectClass          @relation(fields: [givenClassId], references: [id])
  givenClassId String                @db.Uuid // relation scalar field (used in the `@relation` attribute above)
  assignedAt   DateTime              @default(now())
  assignedBy   String

  @@id([userId, givenClassId])
}

model UsersSubjectClasses {
  user           User                @relation(fields: [userId], references: [id])
  userId         String              @db.Uuid // relation scalar field (used in the `@relation` attribute above)
  subjectClass   SubjectClass        @relation(fields: [subjectClassId], references: [id])
  subjectClassId String              @db.Uuid // relation scalar field (used in the `@relation` attribute above)
  assignedAt     DateTime            @default(now())
  assignedBy     String

  @@id([userId, subjectClassId])
}

model Form {
  id          String                 @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String
  description String
  status      String
  type        String
  isTemplate  Boolean
  questions   Question[]
  user        User                   @relation(fields: [userId], references: [id])
  userId      String                 @db.Uuid
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt @default(now())
}

model Question {
  id             String              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  singleAnswer   Boolean
  title          String
  subtitle       String?
  style          Json?
  feedback       String?
  image          String?
  order          Float
  exhibitionMode String
  type           String
  mandatory      Boolean
  form           Form                @relation(fields: [formId], references: [id])
  formId         String              @db.Uuid
  options        Json?
}
